Un gioco per non droppare, una CPU ed una GPU devono risolvere tutto in 17ms.
La GPU è quella che soffre di più.

Dalla cpu vengono passate le primitive: si creano gli oggetti in obj space, gli objects tradotti in word space, i quali poi vengono posti in camspace (nel frustum della camera). Gli oggetti nel frustum vengono clippati ( si è passati nello spazio canonico del clip space) ed infine viene convertito nello screen space che è quello che viene effettivamente visto. questa fase si chiama ModelViewProjection.

La fase di rasterizzazione si incarica di disegnare i pixel in base ai material (texture + shader)

Tutta questa fase è una drawcall (dipendente dalla geometria e dal material)
Si usano gli atlas, che è un accorpamento di texture in base allo shader che condividono. Ciò permette di avere un ottimizzazione e di poter applicare questi materiali su oggetti diversi con una sola drawcall.

pattern hot/cold o live/dead list! da vedere

Optimization HW
una alu è composta da 3 componenti solitamente: int pipeline, float pipeline, vector pipeline. Ogni pipeline ha un suo costo.
un Branch predictor che serve per risolvere le predizioni degli if.

un intrinseca sono delle chiamate che vanno direttamente sull'HW, sono un livello più alto dell'assembly o opcode, una traduzione più leggibile.

una classe è allineata alla dimensione del suo membro più grande.

Branch miss, valutazione di un if che in caso di verifica sbagliata fa un flush della pipeline ( che costa mediamente 24 cicli).
Posso migliorare con l'intrinseca _builtin_expected(cond,result);

il cast tra float e int e viceversa costa circa 200 cicli!!!!


------------------------------------------------------------CONTAINERS----------------------------------------------------------------------------
		{	Vectors							{ set
sequence{	list				associativi	{ map
		{ 	deque							{ multimap



						--------------------------------------VECTORS--------------------------------------	
vectors <typename T, >  v();	// con template
vectors <int>  v();   			// ha istanziato il minimo necessario
vectors <int> v(10);			// ha già istanziato la memoria di 10 spazi, ed anche altro spazio che può essere usato in futuro, N = 10 * K = 1,5

l'ordine di inserimento è mantenuto

vector<A> v;
v p_B(B b);
Se in un vector<A> metto un elemento della classe B ( che deriva da A), creo slice perchè viene chiamato il costruttore di copia di A. NON SI DEVE FARE

vector<A*> v;
un array di puntatori invece può crere dei leak perchè conservo i puntatori, ma se distruggo il vector, gli elementi puntati persistono

vector<A> v;
v p_b(new A()) non chiama il costruttore di copia ma chiama il costruttore di move.
						--------------------------------------VECTORS--------------------------------------


						----------------------------------------MAP----------------------------------------
map<int,string> myMap;     //int è la chiave, cioè ciò che uso per cercare, potrei avere <string,string> e cercare per myMap["saluto"] = "ciao"
myMap[1] = "pollo";
myMap[3] = "foo";
myMap[2] = "foo2";
						----------------------------------------MAP----------------------------------------


						-------------------------------------MULTIMAP--------------------------------------
multimap<int,string> myMultiMap;  è una map a cui posso aggiungere altri valori al nodo, come se ci fossero delle linked list sul nodo.
						-------------------------------------MULTIMAP--------------------------------------


						----------------------------FUNCTOR_AND_FUNCTIONS----------------------------------
Un functor è una classe che implementa una funzione con stato
Class A{
	int count;
	operator(int){};
	operator(float){};
}
A a;
a(1); 		//richiama operator con int
a(10.0); 	//richiama operator con double
						----------------------------FUNCTOR_AND_FUNCTIONS----------------------------------


------------------------------------------------------------CONTAINERS----------------------------------------------------------------------------














-----------------------------------------------------------COSTRUCTOR MOVE------------------------------------------------------------------------

-----------------------------------------------------------COSTRUCTOR MOVE------------------------------------------------------------------------










----------------------------------------------------------DESIGN_PATTERN---------------------------------------------------------------------------

Prendere come riferimento per i pattern in c++ "Design Pattern"


						------------------------------------ITERATORS--------------------------------------
Sono oggetti che iterano su una sequenza di oggetti. Ogni container fornisce il suo iterator.
E' un concetto astratto, un design pattern, è rispetta alcune regole, quindi una volta soddisfatte lo si può definire per una qualsiasi struttura.
Lavora sul concetto di puntatori, e non per forza devono essere const(solo quando non voglio modificare tramite iterator).
						------------------------------------ITERATORS--------------------------------------


						-----------------------------------ALGORITHMS--------------------------------------
Mentre alcuni algoritmi sono nativi delle classi, attivando la libreria degli algoritmi è possibile utilizzarne di altri per estendere le funzionalità.
						-----------------------------------ALGORITHMS--------------------------------------



						-----------------------------------SINGLETON---------------------------------------
Non così banale.
E' possibile fare un singleton di un tipo?
template <typename T> class Singleton{
	static T* _instance;
	
	public:
		static T& getInstance(){
			if( _instance != nullptr){
				_instance = new T();
			}
			return _instance;
		}
}

utilizzando un'abstract factory posso migliorare la funzione per creare 
template <typename T, typename C<T>> class Singleton{
	static T* _instance;
	
	public:
		static T& getInstance(){
			if( _instance != nullptr){
				_instance = C::create();
			}
			return _instance;
		}
}
						-----------------------------------SINGLETON---------------------------------------


						--------------------------------ABSTRACT_FACTORY-----------------------------------
						--------------------------------ABSTRACT_FACTORY-----------------------------------


						-------------------------------------OBSERVER--------------------------------------						
Esempio soccer hero di Simone:
tutti i componenti sono registrati a match e non il contrario, match registrato ad ogni componente ( goal, fallo, punizione etc ) per vedere chi ha modificato il suo stato. In questo modo, componenti registrati su match, sono i componenti che notificano a match l'avvenuto goal.
Ogni componente ha un filtro:
Goal = 00000001  	equivalente a 1 << 0
Pun  = 00000010		equivalente a 1 << 1
fall = 00000100		equivalente a 1 << 2

Facendo AND fra ciò a cui sono registrato ed il messaggio mandato sò se devo catturare la notifica:

Esempio, sono registrato su Goal e Fall avrò:
00000101 &&
00000001
--------
00000001
allora recepisco l'evento.

Altro esempio, sono in attesa di un evento che si ripete molte volte ma per un oggetto, alla prima occorrenza, si vuole deregistrare.
data la lista degli observer [] [] [] e l'observable (), se devo deregistrare un elemento della lista, la quale sta venendo iterata per notificare, non posso cancellare l'elemento. Una soluzione è copiare la lista, scorrere quella e cancellare l'oggetto dalla lista. Problema è però che si ha lka copia dell'array.
						-------------------------------------OBSERVER--------------------------------------						

						--------------------------------------COMMAND--------------------------------------						
Un classe che implementa command, ha un metodo execute che esegue un comando.
Avendone una serie, è possibile usare gli execute in successione per avere dei comportamenti che eventualmente posso modificare semplicemente modificando l'ordine dei command. Si può affiancare al composite.
Il command chiama metodi public della classse
						--------------------------------------COMMAND--------------------------------------						

						------------------------------------COMPOSITE--------------------------------------						
Il composite è da intendere come un blocco immutabile fatto da più oggetti che appariranno e verranno utilizati sempre insieme, anche se sono differenti, e che quindi possono essere incapsulati come un oggetto composito.
						------------------------------------COMPOSITE--------------------------------------						

						--------------------------------TEMPLATE_METHOD------------------------------------						
Date due classi A con virtual foo(); e B:A con foo();
mettiamo che dentro foo io faccio un operazione 1 e dopo un operazione 2 ma B deve fare solo l'operazione 2.

Il template significa rimuovere il virtual dal foo e mettere protected virtual operazione 3.
Ora chiamando foo di A si fà l'operazione 1 2 e 3 che probabilmente è vuota, mentre chi eredità farà l'operazione 1 2 e 3 che specifica diversamente da quello di a tramite implementazione forzata o override.

es: classA{
	public:
	virtual bool init();
	private:
	bool isInitialized;
}

ora voglio estendere con un classe, dovrei fare:
init(){
	super.init();
	e dopo devo fare altro, ma da init il flag isInitialized sarà già true!
}

lo riscrivo con il template pattern:
class A{
	public:
	bool init(){
		....
		init_protected();
		....
		initialized = true;
	}
	private:
	bool isInitialized;
	protected:   //usato per estendere i virtual o dare operazioni solo ai figli
	virtual bool init_protected();
}

						--------------------------------TEMPLATE_METHOD------------------------------------						

						------------------------------------STRATEGY---------------------------------------						
Un'interfaccia hanno comportamenti diversi in base al tipo, quindi ad esempio attacco/difesa hanno gli stessi metodi ma comportamenti diversi
						------------------------------------STRATEGY---------------------------------------						

						-----------------------------------ALLOCATOR---------------------------------------						
Game-Object allocator, anzichè creare una istanza tramite new a run time, istanzio gli oggetti prima creando un pool al quale chiedo gli oggetti quando mi servono. Una volta inutili li disattivo e quelli disattivati diventano disponibili per successive chiamate. Gli oggetti sono così già disponibili e non devo instanziarli a runtime.
						-----------------------------------ALLOCATOR---------------------------------------						

----------------------------------------------------------DESIGN_PATTERN---------------------------------------------------------------------------




-----------------------------------------------------LOW LEVEL OPTIMIZATION------------------------------------------------------------------------
1-Evitare new a run time
2-Branch miss avoiding
3-Evitare i cast, portano a svuotare la pipeline principale per utilizzare ad esempio la pipeline per i float.

4-
dato ad esempio
if(b){
	x = Y;
}else{
	x = z;
}

dato che b vale 0 o 1 posso usare l'interpolazione lineare.
x = b*y + (|b)*z;

5-
dato 
int32 x = max(y,z);
posso scriverlo
int32 x = y - ((y-z) & ((y-z) >> 31))
esempio y = 1 ; z = 4
y = 00000001
z = 00000100

y-z = 11111101
>>31= 11111111

&  =  11111101

y- =  00000001 -
	  00000011 (è il complemento a 2 di &) 
	  --------
	  00000100
che è z!

6- 
if(cond){
	f();
}else{
	g();
}

typedef void *Procedure();
Procedure proc[] = (f,g);
proc[cond]();

salvo i puntatori in un array che chiamo tramite cond che vale o 0 o 1.

---------------------------------------LOW LEVEL OPTIMIZATION------------------------------------------------------------------------


--------------------------------------------LOOP OPTIMIZATION------------------------------------------------------------------------
1- variable in the loop? no define before the for because it will be allocated only one time and not N for times.
2- loop switching, se posso porto gli if fuori dal for e non li faccio dentro.
3- le cose che uso in un for sono cached? se non lo sono conviene spaccare il for (identico) per fare le operazioni separatamente dato che non è detto che siano cached
4- aggregare le operazioni vicine (tipo due somme)
5- other
--------------------------------------------LOOP OPTIMIZATION------------------------------------------------------------------------


SHADER




Esempio:
Devo switchare fra 3 camere:
5 CooPit
7 Cofano
8 Esterna 

void switchCamera(int id);

un oggetto camera è:

struct{
	Pos
	Rot
	Fov
	Id
}



Uso del template matching per switchare le camere:

NOTA:
vedere
match check delle funzioni con i parametri
promozione di un tipo

ridefiniamo la struct così:

template<int v> struct INT2TYPE{
	enum{ value = v}
}

posso dunque scrivere INT2TYPE<0>,INT2TYPE<1> 0 ed 1 sono tipi diversi.

ed il nuovo metodo sarà suddiviso nelle camere:

void switchCamera(INT2TYPE<5>);
void switchCamera(INT2TYPE<7>);
void switchCamera(INT2TYPE<8>);

sfrutto il fatto che INT2TYPE<> è un tipo diverso, quindi se passo 5, questo è un tipo, è lui fa il best matching che è con switchCamera(INT2TYPE<5>).
SONO SOLO OVERLOAD, niente virtual



Esempio:
Template<Class To, Class From> TO_SAFE_REINTERPRET_CAST(FROM From){
	assert(sizeof(To) <= sizeof(From))
	return reinterpret_Cast<To>(From);
}

come fare a fare un assert a compile time?

char myArray[0]; questo non compila
allora riscrivo

#DEFINE STATIC_CHECK(esp) char compilation_error[esp?1:0];
il problema è debuggarlo dato che non ho sicurezza sul come viene stampato l'errore.

template<bool> struct compileTimeError;
template<> struct compileTimeError<true>();

#DEFINE STATIC_CHECK(esp e) (compileTimeError<(esp)bool>())
non essendo definita la false gli da errore di compilazione perchè non è stata definita la specializzazione totale per la false!




TEMPLATE E VIRTUALISMO STATICO
Prendiamo ad esempio le camere e la classe base con i get necessari tipici ed un update.
La camera con il coopit deriva ed usa altri behaviour, idem quella esterna, etc etc.
La funzione update sarebbe virtual così da fare l'overload ed ognuno se la rispecifica.

tramite template posso ad esempio fare:
template <class T,class U> smartPtr....

e specifico ad esempio T a singleThread e U a refPointer, dando quindi certi behaviour a smartPtr.
implementazione:

POLICY
template<class T> STRUCT NEW_OP{
	static T* CREATE(){
		return new T;
	}
	protected:
		~NewOP()	-> altrimenti posso distruggere il padre e non il figlio facendo SLICE!
}


USO POLICY
template<class U> class WidgetManager :: Public U{
	public:
		WidgetManager(){
			U::CREATE();	--> se non esiste dentro U il metodo Create, non compila!!!!!
		}
}


l'implementazione diventa:
typedef WidgetManager<OpNewCreator<Widget>> MyWidgetMgr;


ma come Library code diventerebbe
template < template <class> class CreationPolicy > class WidgetManager: public CreationPolicy<Widget> {
	
}

Vedere le librerie OpenCV e BOOST per capire questo tipo di applicazione.

*